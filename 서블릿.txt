1.서블릿 등록하기
@WebServlet(name = "helloServlet", urlPatterns = "/hello")
public class HelloServlet extends HttpServlet {
  //HTTP 요청을 통해 매핑된 URL이 호출되면 서블릿 컨테이너는 다음 메서드를 실행한다.
    @Override
    protected void service(HttpServletRequest request, HttpServletResponse response)

-@WebServlet 서블릿 애노테이션
-name: 서블릿 이름
-urlPatterns: URL 매핑

2.HTTP 요청 메시지 로그로 확인하기
application.properties
    logging.level.org.apache.coyote.http11=debug

-요청해보면 서버가 받은 HTTP 요청 메시지를 출력하는 것을 확인할 수 있다


3.HttpServletRequest - 개요
    1) HttpServletRequest 역할
        -서블릿은 개발자가 HTTP 요청 메시지를 편리하게 사용할 수 있도록 개발자 대신에 HTTP 요청 메시지를 파싱한다.
        -결과를 HttpServletRequest 객체에 담아서 제공한다.
    
    2)임시 저장소 기능
        해당 HTTP 요청이 시작부터 끝날 때 까지 유지되는 임시 저장소 기능
        저장: request.setAttribute(name, value)
        조회: request.getAttribute(name)

    3) 세션 관리 기능
        request.getSession(create: true)

    4) HttpServletRequest, HttpServletResponse를 사용할 때 가장 중요한 점은 
        이 객체들이 HTTP 요청메시지, HTTP 응답 메시지를 편리하게 사용하도록 도와주는 객체라는 점이다


4.HttpServletRequest - 기본 사용법
WebServlet(name = "requestHeaderServlet", urlPatterns = "/request-header")
public class RequestHeaderServlet extends HttpServlet {
    @Override
    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        printStartLine(request);
        printHeaders(request);
        printHeaderUtils(request);
        printEtc(request);
        response.getWriter().write("ok");  //화면에 출력되는 메서드
    }
}


5.HTTP 요청 데이터 - 개요
HTTP 요청 메시지를 통해 클라이언트에서 서버로 데이터를 전달하는 방법 (3가지 방법)
    
    1) GET - 쿼리 파라미터
        - /url?username=hello&age=20
        - 메시지 바디 없이, URL의 쿼리 파라미터에 데이터를 포함해서 전달
        - ? 뒤에 파라미터 작성
        - 예) 검색, 필터, 페이징등에서 많이 사용하는 방식

    2) POST - HTML Form
        - content-type: application/x-www-form-urlencoded
        - 메시지 바디에 쿼리 파리미터 형식으로 전달 username=hello&age=20
        - 예) 회원 가입, 상품 주문, HTML Form 사용

    3) HTTP message body에 데이터를 직접 담아서 요청
        - HTTP API에서 주로 사용, JSON, XML, TEXT
        - 데이터 형식은 주로 JSON 사용 : POST, PUT, PATCH

    
5 - 1) HTTP 요청 데이터 - GET 쿼리 파라미터
        - 쿼리 파라미터는 URL에 다음과 같이 ? 를 시작으로 보낼 수 있다. 추가 파라미터는 & 로 구분하면 된다
        - http://localhost:8080/request-param?username=hello&age=20
        - 쿼리 파라미터 조회 메서드
            -String username = request.getParameter("username"); //단일 파라미터 조회
            -Enumeration<String> parameterNames = request.getParameterNames(); //파라미터 이름들 모두 조회
            -Map<String, String[]> parameterMap = request.getParameterMap(); //파라미터를 Map으로 조회
            -String[] usernames = request.getParameterValues("username"); //복수 파라미터 조회
               for (String name : usernames) { 
                    System.out.println("username=" + name);
               }
        
        -복수 파라미터에서 단일 파라미터 조회
            -username=hello&username=kim 과 같이 파라미터 이름은 하나인데, 값이 중복
            -request.getParameter() 는 하나의 파라미터 이름에 대해서 단 하나의 값만 있을 때 사용해야 한다
            -중복일 때는 request.getParameterValues() 를 사용해야 한다.
            -중복일 때 request.getParameter() 를 사용하면 request.getParameterValues() 의 첫번째 값을 반환한다

5 - 2) HTTP 요청 데이터 - POST HTML Form
        - 특징
            -content-type: application/x-www-form-urlencoded
            -메시지 바디에 쿼리 파리미터 형식으로 데이터를 전달한다. username=hello&age=20

            <form action="/request-param" method="post">
                username: <input type="text" name="username" />
                age: <input type="text" name="age" />
                <button type="submit">전송</button>
            </form>

        - POST의 HTML Form을 전송하면 웹 브라우저는 다음 형식으로 HTTP 메시지를 만든다
            요청 URL: http://localhost:8080/request-param
            content-type: application/x-www-form-urlencoded (content-type은 HTTP 메시지 바디의 데이터 형식을 지정한다)
            message body: username=hello&age=20

        -application/x-www-form-urlencoded 형식은 앞서 GET에서 살펴본 쿼리 파라미터 형식과 같다.
            따라서 쿼리 파라미터 조회 메서드를 그대로 사용하면 된다.
        -클라이언트(웹 브라우저) 입장에서는 두 방식에 차이가 있지만, 서버 입장에서는 둘의 형식이 동일하므로,
            request.getParameter() 로 편리하게 구분없이 조회할 수 있다.

        -request.getParameter() 는 GET URL 쿼리 파라미터 형식도 지원하고, POST HTML Form 형식도 둘 다 지원한다

        -참고
            -GET URL 쿼리 파라미터 형식으로 클라이언트에서 서버로 데이터를 전달할 때는 HTTP 메시지 바디를 사용하지 않기 때문에 content-type이 없다.
            -POST HTML Form 형식으로 데이터를 전달하면 HTTP 메시지 바디에 해당 데이터를 포함해서 보내기 때문에 바디에 포함된 데이터가 어떤 형식인지 content-type을 꼭 지정해야 한다
             폼으로 데이터를 전송하는 형식을 application/x-www-form-urlencoded 라 한다


5 - 3) HTTP 요청 데이터 - API 메시지 바디 - 단순 텍스트
        -HTTP message body에 데이터를 직접 담아서 요청
        -HTTP 메시지 바디의 데이터를 InputStream을 사용해서 직접 읽을 수 있다.

        @WebServlet(name = "requestBodyStringServlet", urlPatterns = "/request-bodystring")
        public class RequestBodyStringServlet extends HttpServlet {
            @Override
            protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
                ServletInputStream inputStream = request.getInputStream();
                String messageBody = StreamUtils.copyToString(inputStream,
                StandardCharsets.UTF_8);

                System.out.println("messageBody = " + messageBody);

                response.getWriter().write("ok");
            }
        }

        -참고
           -inputStream은 byte 코드를 반환한다 byte 코드를 우리가 읽을 수 있는 문자(String)로 보려면 문자표(Charset)를 지정해주어야 한다. 여기서는 UTF_8 Charset을 지정


5 - 4) HTTP 요청 데이터 - API 메시지 바디 - JSON
        -JSON 형식 전송
            POST http://localhost:8080/request-body-json
            content-type: application/json
            message body: {"username": "hello", "age": 20}
            결과: messageBody = {"username": "hello", "age": 20}

==서블릿 27p